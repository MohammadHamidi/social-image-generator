services:
  social-image-generator:
    build: .
    container_name: social-image-generator
    volumes:
      # Mount output directory for generated images
      - ./output:/app/output
      # Mount uploads directory for user images
      - ./uploads:/app/uploads
      # Mount generated directory for API-generated images
      - ./generated:/app/generated
      # Mount config directory for custom configurations
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app/src
      - PYTHONDONTWRITEBYTECODE=1
      # Disable Flask debug mode in production
      - FLASK_ENV=production
    ports:
      - "${PORT:-5000}:5000" # Configurable port with fallback to 5000
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "python", "-c", "import flask; from src.enhanced_social_generator import EnhancedSocialImageGenerator; print('OK')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - social-image-network
    # Remove user specification for better Linux compatibility
    # Let Docker handle user permissions automatically

  # Development service with hot reload
  dev:
    build: .
    container_name: social-image-generator-dev
    volumes:
      - .:/app
      - /app/__pycache__
    environment:
      - PYTHONPATH=/app/src
      - PYTHONDONTWRITEBYTECODE=1
    command: tail -f /dev/null # Keep container running for development
    ports:
      - "${DEV_PORT:-8000}:8000" # Configurable dev port
    profiles:
      - dev
    networks:
      - social-image-network
    # Remove user specification for better Linux compatibility

  # Test service
  test:
    build: .
    container_name: social-image-generator-test
    volumes:
      - .:/app
      - /app/__pycache__
    environment:
      - PYTHONPATH=/app/src
      - PYTHONDONTWRITEBYTECODE=1
    command: python -m pytest tests/ -v
    profiles:
      - test
    networks:
      - social-image-network
    # Remove user specification for better Linux compatibility

networks:
  social-image-network:
    driver: bridge

volumes:
  uploads:
    driver: local
  output:
    driver: local